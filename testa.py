from matrix import Matrix
from astar import AStarFinder, manhattan, octile
import cv2
import numpy as np
import datetime
# from pathfinding.core.diagonal_movement import DiagonalMovement
# from pathfinding.core.grid import Grid
# from pathfinding.finder.a_star import AStarFinder
# from pathfinding.core.heuristic import manhattan, octile, chebyshev, euclidean
# from pathfinding.core.util import smoothen_path
img_str = b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x01\x8b\x00\x00\x01\xc9\x08\x03\x00\x00\x00C\xae\xe5\xde\x00\x00\x01\x05PLTE\x00\x00\x00\x10\x10\x10   000@@@MMMPPPWWW[[[```bbbdddggghhhjjjlllnnnppprrrtttvvvxxxzzz~~~\x80\x80\x80\x82\x82\x82\x85\x85\x85\x86\x86\x86\x88\x88\x88\x8b\x8b\x8b\x8c\x8c\x8c\x8e\x8e\x8e\x90\x90\x90\x92\x92\x92\x95\x95\x95\x96\x96\x96\x98\x98\x98\x9a\x9a\x9a\x9c\x9c\x9c\x9e\x9e\x9e\xa1\xa1\xa1\xa2\xa2\xa2\xa5\xa5\xa5\xa6\xa6\xa6\xa9\xa9\xa9\xab\xab\xab\xac\xac\xac\xae\xae\xae\xb0\xb0\xb0\xb2\xb2\xb2\xb4\xb4\xb4\xb7\xb7\xb7\xba\xba\xba\xbd\xbd\xbd\xbe\xbe\xbe\xc0\xc0\xc0\xc2\xc2\xc2\xc4\xc4\xc4\xc8\xc8\xc8\xca\xca\xca\xcd\xcd\xcd\xce\xce\xce\xd0\xd0\xd0\xd3\xd3\xd3\xd4\xd4\xd4\xd7\xd7\xd7\xd8\xd8\xd8\xdb\xdb\xdb\xdc\xdc\xdc\xde\xde\xde\xe0\xe0\xe0\xe2\xe2\xe2\xe4\xe4\xe4\xe6\xe6\xe6\xe9\xe9\xe9\xea\xea\xea\xed\xed\xed\xee\xee\xee\xf0\xf0\xf0\xf2\xf2\xf2\xf4\xf4\xf4\xf6\xf6\xf6\xf8\xf8\xf8\xfb\xfb\xfb\xfd\xfd\xfd\xfe\xfe\xfe\xff\xff\xff\xae\xa6~\xf4\x00\x00\x00\x01bKGDV\n\r\xe9\x89\x00\x00\x17UIDATx\xda\xed\x9dyc\xd3\xb8\xd3\xc7\xed\xc4\x1b\xea]7mh\x97\x1a\xca\x12\xae\x1f\xe1Z\xc2i(O\xc3r\x19\xdaR\xb7\xa5\xa0\xf7\xffV\x1e9v\xda\x1c\xb6#\xc9:F\xf1|\xff\xe8f\x03\xa5\x8e>\x9dC#i\xe4\x10\x94T\r\x1c\'L\xc4\xbe\xd51\xfd\xec\xab\xa6\x9e\xe38\xad\xa1\xd0\xb7"\x0b\xc9j;\xa9\xbc\x91\xc0\xb7"\x0b\xb9J\x9c\\=~G\x85,\xe4*\x9a\xb0p\xdc\x01\xef\xf7"\x0b\xb9\n\x9dKy\x11\xdf\xf7"\x0b\xb9\xf2\x9ci\xf9\\\x8e\nY\xc8\x953+\xb7\xcf\xf3\xbd\xa6\x1f~\xb54r\xe6\xd5fwT\xc8\x82M\xd1\xa0\xe7\xb9N\xcb\xf3za\x18E\xa5\xe3\xdbw\x16\xd5\x89\x19\x7f\x06\xb2X\xa6\xd10\xec\xb4\x16G\xd8\xf5<?\x0c\x07Q4\x13\x12:\x05,\x1c7d\xfbI\xc8\xa2\\I\x14\xfa\x9e\xc3 \xcf\xf3\xc2\xb0\x1fE1i\x15\xff\x85\x16\x93\xa3B\x16e\x8a\x980\xb0\x8a\x05\x06\xb2(V\xec\xcb$AM\x87\xe1g"\x8b"\xc9&\xc1f\x18\xc8bQI\xe8JG\xc1b\x18\xc8b^JH0\x19\x06\xb2\x98\xd3\xa0U\x7f\xd8\x05\r\x03Y\xccH\x19\t\x16\xc3@\x16S\x92\x9b\xc6r\x1b\x06\xb2\xc8\x14\x0fCOM\x9c`7\x0cd\xa1\x05\x03\x93a4\x9b\x856\x0cL\x86\xd1h\x16\x03}\x18X\x0c\xa3\xc9,t\xa3Xf\x18\rf1\xd4\x8eb\x89a4\x97\xc5Hc\xa0`3\x8c\xc6\xb20\x82\xa2\xda0\x9a\xca"1\x82\xa2\xda0\x1a\xca"i\x9bAQi\x18\xcdda\x0cE\xa5a4\x93E\xa7\xfe\x98*0\x8cF\xb2\x90\xbfj\'\xc50\x9a\xc8\xc2(\x8a\n\xc3h \x0b\xfd\xd3mF\xc3h\x1e\x0b\xd3(\xca\r\xa3q,\x0cT>X\r\xa3i,\xccL\xb7\xd9\x0c\xa3a, \xa0p\x9c\x92\xa3\x95\xcdba\xaa\xf21\'\xb7\xf8\x88L\xa3X\x18\x9cn\xcf\xaa\xd3x\x16`P8N\xe1\xb9\xca&\xb10X\xf9\x98\x97[t>\xa6A,\xccN\xb7\xe7T\x94K5\x87\x05(\x14\x8eSp\xa8\xb21,\x8cO\xb7\xe7T\xe0\xa5\x9a\xc2\x02\x1a\x8a"/\xd5\x10\x16\x00*\x1f\x0bZ\xf0R\x92X\xc4\xfd\xd2|\xd17\xcd\x81@\x99n\xcfk\xbe\x97\x8e\x0c\x16\xc9\xa0r\x7fv\x9b\xf5|s\xc3P8m\xe9,\x86K\xd3v\x97\xb3G\x89l\x01\xa9|,j\xee\xdcwM\x16\x91\xcf\xf49\x19\x0f\x9b+B\x01g\xba=\xafY/U\x87\xc5\xa8\xc7|\x8a\xa7#\xd8\x82o\xb5Q\xccy\xa9\x1a,\xb8&O-\x91\xa6oR\x04\xa8\xf2\xb1\xa8\x19\x87!\xcc"\xe1\xfc\x8c\xfcm\xc6\xe4\x08\xd8t{^\xd3\xa1T\x94\x85\x80\xe5\xf3\xb6\x19k\x02\n\xa75\xe5\xbc\x05Y\x88e\x89\xcc\xdd{d)\x81\x8e\xc2qzuY\x0cE\xb3D_+\x8d\x11\xe0\xb0}\xa1Ko!\xc4\xa2_\xe3Gk\xa41\x80:\xaf\x98\xd1\xa5\x97\x12aQ\xcf\xf0]\xd1\x16\xd3\x9c\xb2\xc0?e\xba\xf0R\xfc,\x92\xda\x07\xd2\xb5\xd0\xb0\xc2?e\x9al\x0b\xe1f\x11\xcb\xf8\x8c\xac]\xdf\xc4e\x87\x7f\xcaG#\x11c!\xab\xcc\xd6R:\xdd\xb0\xc6?e\xea\x08\xb1\x90\xf8\xeb\xa6\x90\x86E\xfe)S"\xc0\xa2N\x02U@C\xd1\xe4\xcf&\xff\x94)\xe2g!\xdd\xf2\xe5O\xc5\x93\xa1\xaf\xb0\xed\x90*\x85\xbc,\xea\'P\x05ju\xc2HZV\x15\xf5lsN\xb9|N\x16R\x12\xa8b\xb5\xfc~m\x03\x19\xf5\x956\x7fR\xab6\x1f\x0b\xe5\xeb\x94m\x7f ZW\x8f\x07\x1d\xebB\xc4\xac\xb8Xh\xda\xd3\xe2\xf5\x06Kj$\xa3(U\x98\xca\xf7RYN!\xd3\x88\x83EX\xff\xc71\xcb\xf5\xc2a\x9cv\xb0N5\x18\x8f\xfax\xd0-\x8d\x05L\x1a\xb0\xb3\xb0k\xead\xa1BV\x16\x90W\x8cWD\x1e#\x0b\xebf\xb1\x16\xcaec\x01t\xa3\xd7\x8a)aa\x01oS\xf0J*b`\xa13\x81j\xb2\xc2\xe5,0\x81\xd2$\x7f\x19\x0bL\xa0\xb4\xa9\xbd\x84\xc5\xc8\xc2\x8a\xa7\xb5\xaaf\x11a\x02\xa5Q\xa3*\x16\x98@i\xd5\xa0\x82E\xcf\xf4\xc35La)\x0b\xcb\x16\xefW@^\x19\x0bL\xa0\xb4\xcb-a\x81\t\x94\x01%\x85,0\x812\xa1\xa8\x88\x05&PF\x14\x16\xb0\xc0\x04\xca\x8c\xfc\x05\x16\xbcG\xbfP\xb2\xd4\x9eg\x81\t\x949\xcd\xb1\xc0u#\x83\x1a\xcd\xb0\x10>\xfa\x85\x92\xa0\xc14\x0bL\xa0\x8c*\x9cb12\xfd0\r\x977\xc5\x02KPf\xe5^\xb2\x00\xdbM\xa69\xc2h\x01G\x17,pfa\\\x18\xb9\xe1\x08#7\x14]\xc4n\x8c\xdc\xc6u\x91\xd3b\xe46\xae\x0b\x16\x18\xb9\x8dk\xc2\x02#\xb7yMX`\xe46\xaf\x9c\x05Fn\x00\xcaY`\xe4\x06\xa0\x9c\x05Fn\x00\xcaX`\xe4\x86\xa0\x8c\x05Fn\x08\xea9\x18\xb9\xa1h\xbc\xae\x87\x91\x1b\x84\xc6,0r\x83P\xca"1\xfd\x10\xa8\xb1R\x16\x91\xe9\x87@\x8d\x95\xb2\xc0#\xdc0\x94\xb2\xc0\x8c\x16\x86R\x16\x16\xf7\x86[)\xa5,L?\x03*S\xdf\xc1\x02\x08\x14E\x0e\xc8+\x19\x1b)\xca\x02\xd3( \xa2,\xf0 \x12\x10Q\x16x~\x18\x88(\x0b\xd3\x8f\x80\xca\x159X\x01\x81\xa2\xc8\xc1\x829\x14E\x0e\x1e\xe7\x86\xa2\xc8\xc1\n\x08\x14%\x0e\xae\xafB\x11q0\xa5\x85"\xe2\xe0T\x0f\x8a\x88#\xf7:*\x94\xb8\x88\x83eZ J{\xb3\x98~\x06T\xa6>e\x81I-\x0c\xc5\x04k\xe6@\xd4N{?bA\n\x84\xfa)\x0b\xdc\xaa\x06B\xf1\xb8\'*n\xe1\x04\xa0\xbc\xcf?V\x07\x01\xa8\x9f\xb1\xc0\xaa9\x00\xc5\x19\x8b\xd8\xf4s\xa0\xb2\x0bY\xd3=\xffX\x1e4\xae\xfe\x84\x05\x96\x07\x8d+\x9e\xb0\xc0\xf2\xa0i]\xde\x19\x8d\xe5A\xd3\xea_\xb0\xc0\xf2\xa0i\xc5\x97,\xb0<hV\x99\x8b\xcaX`y\xd0\xac\xfaS,\xb0<hV\xf1\x14\x0b,\x0f\x1aU\xee\xa2\x08\xf6f1\xaf\xfe\x0c\x0b,\x0f\x9aT<\xc3\x02\xcb\x83\xe6\xd4\x8a\xc8\x0c\x0b,\x0f\x9a\x92\x1b^6\xf7w\xb0\r\xa7Iub\xb2\xc0\x02\x9d\x94\t\xb5#B\x16Y\x10\xdc\xe2\xac]n\x9f\x90B\x168\xf5\xd6-?!%,0z+\x95\x17u\xe6\xdf \xa4\x8c\x05.()T:\xf0\xc9\xf4\xea\xa9; \xa4\x82\x05\xd6\xa4T\xc9\x8f\xe7\x07\xb8\x97\x90J\x16\xb8\xea\xadF\xfeE\xd6:\t\xc9\xde\x88\x90%,0\xadU \x7fz\xfe0\x9e\xc4\xb5\x86\x84,e\x81\x9dQ\xa5k\x86\x04\xcd\x8f\xe8\x08\x87\ta`\x81\xfd\xd5\xe4\xca]\x1c\xf6\x81\x17\x13\xc2\xc4\x02\xd3Z\x89r\xab\x0c`9\x0b\\\xf6\x96&\x11\x12\xb3,\xb0\xab\x97\x1c\x89\x91\x98e\x81i\xad\x0c\xb5\x06B \xe6Y`Q\xaa\xb6\xc4I\xcc\xb1\xc0=\x085U\x87\xc4\x1c\x0bLkk\xa9\x1e\x89y\x16\xb8\xb3V\\E\x95\xd7:,p\xadUT\xf5I,\xb0\xc0\xa2\x94\xa0\x86b\xc3_\xc5\x02\xd7Z\x05\xe5\x8aM)*Y`Z+\xa8\x8e|\x16X\x94\x12U}/5\xcf\x02\xd7ZEU\xdfK-\xb0\xc0\xb5VQ\xd5\xf6R\x0b,\xb0(%\xa4\x96?\x88\x05\x86\x7f\t\x0bLky%\x83C1\x0b\\k\xe5\x91,\x0e\xc5,\xb0(\xc5*\x99\x1cJX`Z\xcb \xd9\x1cJX\xe0Z\xeb\x12\xa9\xe0P\xc6\x02\xd7Z\xab\xa5\x04D\t\x0bLk\xabUs\x99\x82\x8f\x05\x16\xa5*\xe5\xebd\x81k\xad\x95j\xe9d\x81im\xb5\x14\x05\x8cb\x16\xb8\xd6Z)E\x01\xa3\x98\x05Vk+\xa5(`\x94\xb0\xc0BH\x95\x14\x05\x8c\x12\x168\xc7(S\xbb\x13F\x12\xd6SyX\xa0\x97Z\x94\xe7\xf7%\xec\xf6\x10`\x11\xa3\x97\xba\x94\xeb\x85\x83\x11\xcf\xb0\xcae\x81\xdd93\xb5:\xe1PU\xd1\x83\x99\x05\x96\x08\xdb\xd4\')\n\r\xbc,\x9a\xec\xa5\xbc\xde@ih\xe0e\xd1L/EC\x83.\x9f\xc4\xc3\xa2\x81^J\xc6\xb6X5,\x9a\xe6\xa5|\x93$\x96\xb0h\x96\x97\xf2\r\xb9&F\x16\r:\x03`\x9c\xc4R\x16\r)\xd8\xba\x00H,e\xd1\x88%>\xd13\xc0\xbaY\xac\xbe\x97\x82B\x82\x81\xc5\x8a{)8$\x18X\xac\xb4\x97\xaa{\xf2T7\x8b\xd5\xf5R\xb0H0\xb1XQ/\x05\x8d\x04\x13\x8b\x95\xec<\xef\xc98xj\x80E\xb2r\xfb\x08\x8d\x96\x9dj\xb1X\xb9sc\xaa6\xfe\xe9`\xb1b^\n(\nF\x16+\xe5\xa5\xdapf\x14",V\xc9K\xb5\xa0\xa2`e\xb1:^\xcaU\xbf\x9fC5\x8b\x95\xf1RpQ0\xb3X\x95\x8d\x84\xe0&x",Vc#a\xc8\xfcqA\xb3X\x85\xed\xceP\xb3Y^\x16+\xe0\xa5<\xd3\xa3-\x8d\x85\xf5WK\x83\x9dX\xf0\xb3\xb0\xfd\x0c\xbe\x0baM[\x12\x0b\xcb\xe7{\x80\'\x16\x8dc\x01\xb0H.\xce\xc2\xeefF\x90\'\x16\xfc,\xac^\xf8n\xb3\x7fNd\xa1X=\xd3\x03-\x97\x85\xd5\x07\xf0\xc1\x07n>\x166\x9f\x00pM\x8f3\xb2\xb8\x10\xec\xe2\x07?\x0b\x9b\xab\xe6\xf0\x13Z>\x16\xa6\xc7\xb3\x8e\x80W?\x9a\xc4BB\xb3qP,l.GY0\xd1\xe3bas\t\x04zU\xb0A,l\x98ts\xb1\xb0\xb8\x1c\x05zeU\x84\x85\xc5%\x10\x1b&\xdd\ra\xa1\xaaW\xa39\x16\xf6\x96\xa3l\xa8\x0b\xf2\xb1\xb0\xb7\x04b\xc5\xa4\xbb\x19,\xac\xa8\x0b\xf2\xb1\xb0\xb6\x1ce\xc7\xa4\x9b\x8b\x85\xa1\x91l\xf7c2\x8a\x86a\xd8\xf1\x04\x0fq\xda1\xe9\xe6aad\xaa\x97\x82\x98\x96P\xfe`E]\x90\x8b\x85\xfep1\x0f\x82*\x110\r\xe0\x9b\x05\x05X\xe8>X\\\x00b\xfc\x18\xfc\x9bz\xfb\xa6\x87X:\x0b\xad\xb3\x8b\x12\x10\xa9\xf8+1v\xd4\x059Xh,\x98W\x80\x10\xf9\xa5\xb0&\x8bbf\xa1\xcf,\x96\x8d\x1dg\xc8\x80{:O\x94\x85>\xb3X>v|!\x03\xe4\xa1\xfaZ,\xf4\x9d\x9cd\x18;\x9e\x90aI\xb5\x9c\x83\x85\xbe#ILc\xc7\xee0-YD\xe2a\xa1\xad\\\xce6v\xcc!\x03\xfc\x89\x0b~\x16\xda\xcc\x82\xf5\x88\x04k\xc8\xb0gj\xc1\xccB\x9bY0\x8f\x1d[\xc8\xb0(\x9def\xa1\xabB\xcb>vL\xc78\xeb_4\x0f\x8f\x85\xaeM\x07\xecc\xc7\xe64mJgYY\xe82\x0b\xf6\xe57\xa6c\xff\xb6\xac\xac\xf2\xb0\xd0e\x16\xecc\xc7\xe4\xa1\xecJg\x19Yh2\x0b\xf6\xc3\xd7l\x1e\xca\x92}8\\,t\xad!\xb1\x8f\x1d\x93\x87\xb2,\x9dec\xa1i\r\x89\xbdX\xc1\xe4\xa1\xecY@\xe2`\xa1\xa9*\xc8>vL\x1e\xca\xbat\x96\x89\x85\x9e\xdbH8\x8a\x15L\x1e\xca\x96\x1dQ|,\xf44\xd0\xe6\x18;\x96\xb4\xce\xbet\x96\x85\x85&\x17\xc5\xf3\xc4\xcba\xd8\xb4~\xc4\xc1B\xcf\xe4\x82/\xd2.}&\x0b\xd3Y\x16\x16z\x1a\xdbqf=\xc3\xea\xf0m\xd5\xfa\x11;\x8bD\x0b\nn\xff^Y3\xb72\x9de`\xa1\xa9\xad\x1d\xf7or\x05\x0c\xcb\xd6\x8f\xd8Yh\xda\xfe\xc1\xbf\xe3\xb5\x1c\x86\x9d\xe9\xecX\xd5,4-\xe8\tT\xb7\x8b\xd7Y]\xdf\xd6\xb8\x9d\xaa\x92\x85\xae\xce\x9b"n\xa5\x00F\xaboi2\x9b\xab\x92\x85\xae\xad8BO>\x0f\xc3\xf0e\xaa\x12T9\x0e\x9a\xca\xe5\x82\x07\x87\x92\xa9\x84\xbb\x15\xda\x1b\xb2/T\xc5B\xd7\xder\xe1,t\x92Z@\xbc\xfcH@U,t\xed\xff\x10\x9f\x11\xa40\xdc\xde\n\x98\xc4XU,t]\xacWc\xa2\xec\xb7\xad9\x01\xb6\\\x15,\xb4mh\xb6\xb6h!Y\x15,\xb4]\xa4n}\x02$I\x15,\xb4\x9d\xd0C\x16\x99\xcaYh\xaa\x0b:\x16\x1d4U\xacr\x16\xfaz\x14\x99\x1e\x03(*\x1f\x08mw\xf2\xd8\xd2\xc6F\xb9\xcaYh;\xffb\xef\x82\x83d\x95\xb2\xd0w#\x8f\x15}|u\xa8\x94\x85\xbe\x93\xab+=\xbd\x88\xfb\xedV\xa7\xcfV\xc9/e\xa1\xef\xd60\x1b\xb7[\xb2)\x19\\\x94.\xbcp\xb84],c\xa1\xb1\xe7\xc4\x8aN/\x92\xc1|\xf6\xd3\xf6\x07\x95\x06R\xc6B\xe3\xfd\xab+\xc9b\xe8\x17;\x16\xb7\x13\x96~\xde2\x16\x1a;w\x99\x1e6\xf9\x1a\xf9\xd5\x1e\xbe\xdd\x1b\x16\xd5\x96\xcbFB\x1f\n\x8b\x9a\xa7\xb0\x81\xe81\xfd\x1e\x17\xd4\x97\xcbXh\xbc\xf0s\x85\xaa\xde4ob\xae\xe2-~\xec2\x16\x1a[w\xad\xd0\xfc"\xe1Y~[\x80\x01\x80\xc5\xea\xd4@\x06|\xded\x1e\x06\x00\x16\xab\x120"\xee1\x9b\xcb\xa8\xcaX\xe8\xec\x98\xbd\x12\x01#\x11(T\xcc\xf5\xdc\x80\xc0b\x15\x02F(\x94\xec\xcc\xc2\x80\xc0\xc2\xfe\x80\x11\x89N\xc7f`\x94\xb1\xd0zq\xba\xe5\x01\x83=\x8f\xad\x86Q\xc6Bkk`\xab\x03\x06W\x1e\xbb\xa8\xa9\x1e\x03 X\xd8\x1c08\xf3\xd8*\x18e,\xb4\xde\x1afo\xc0\xe0\xcfc+`\x94V\xe6t\xb2\xb05`\x88\xe4\xb1\x150`\xb0\xb03`\x88\xe5\xb1\x05\xf2 \xb1\xb01`\x08\xe7\xb1\xa5\x9f\xbf\x94\x85\xd6\xbe\xfe\x16\x06\x0c\xb9\xfb\x01|8,\xec\x0b\x18\xb2\xb7f\xf8pX\xd8\x160\xe4\xef\x92\xf1+Xh\\\xf0v\xac\x0b\x18*6,U\xb0\xd0{\xb5\xa1]\x01C\xc9\xde\xb1\x11\x14\x16V\x05\x0c5\xdb\xf8\xa2r\x16\x9a\xaf\xc2\xb5(`(\xdaQ9(g\xa1\xf9\xde0{\x02\x86\xaa\xcd\xad!\x18\x16\xd6\x04\x0ce\xfb\x8c{\xe5,t_\x1cfI\xc0P\xb7\xe5\xdb\xab8\x7f\xa1\x99\x85\x1d\x01C\xe1\xee{@,\xac\x08\x18*\x0fB\xb8pX\xd8\x100\xd4\x9eI\xa9`\xa1\xab\xeb\xc1D\xf0\rC\xf1\xf1\xa0\xb8\x9c\x85\xf6\x0bX\xd9\xbb\xcb\xaf$\n\'\x02\xc4\x82\xf9\xba\xa4\xd5D\xe1\x0c\x1ds?\xbb@\xf5\x93\xa9\xa4\xe3\xa9\xc9\xc8\xd4\x0fGX\xceBsA*S\xdd\xa01^lk\x85\xf2\xbd\x9d\x86\xdfLh,j\x06\x8d\x8bg\xf6\xe5N\x1d%m2\xa8V\xa7\x9c\x85\xb669\xb3\xaa\x114\xe2\xe9\xd4Of\xaf\xb5\x91\x96\x13s^9\x0b\xcd\x05\xa9K\x89\xfa\xfb\xf9]c\xd2\xdarj\xfa\xadl\x01d!\x184\n\x8a\xfcR\xda\xdf%\xda\x1a\xa3@d!\x144\xe2\xe2\xcdJ\x9d\xba\'\x96#\x8d\'\x17\xcb\x9f\xc2\x1c\x0b\x91\xa0QZ&h\xd5\xcaq\xb5f0 Y\xf0\x07\x8d\xaa\xad\x12\xaep\xf3\xda:\xbb\xf9W\x87\x85\xd3\xee\xf3\x0c\xe02\x87*\xd6\xd4y\xa8\xd1?\xa5*\x7f\x12\x8d\xad\x0f\x8a\xd5fN\x84X.\x17\xf3:a?\xe22\x10\xbd\xdb\x92\x1c\x07B\xef\xc7\nu\x06L88\x1e\xb5\xe5\xf5\xc2!\x8b\x95\x8ct\x17\xaa\xa1\xb3\xa0\xea,\x9f\xb4\x89L\x00\x96\x99I\xed3.\x02*\x7f\x1a}y\xf5\x12\xb9~5\x8e:K\xf3\x17f2\x8a\xa2h\x18Ru<\xcf\xd3o\x12c\x95\x7fD3\x05\xa9b\xb9\xbd\xf2,71\x1e\xd8d\xc9\x0e\x16T\xad2\x1c&\x8a\xfbjd\r\x8b\x06\xa8\x9c\x85\xc1"H#\xd5A\x16`\x14#\x0b(\xf2\xab\xfa\xfc\xebk.\x8fr\xd2M\xacU\x9d\x17M?]\xa3\xe4W\xdf\xd1cb\xea\xd9T\xa5W\x97Vv$\x8d\r\xcd?\x1b\xa8\xb4\x91\xf8\x92\xee\xb08\xc7\xd0#7Y\xceB\xea\xe9~T\xa9\xc6\xfd\xf5\x97vM\xd6\xb8\xf4\xde\\\x8d\xcdb9\x0b\x0c\xe1\x1a\x94];\xc1\xd2M\x1cC\xb8b\xe5gO\xd8:\xbbc\x08W\xaa\x01\x0f\x0b\x0c\xe1*59\x92\xc5z\xe3\x01\x86pu\x1ap\xb2\xc0\x10\xaeL\x17\'\x159n\x02\xc1\x10\xaeF\x91\x00\x0b\x0c\xe1Jty\xbd \xdf\r9\x18\xc2\xe5+\x12d\x81!\\\xb6\xdc\xa9\xedF\xdc7Ga\x08\x97)oz\xb7\x1c\xff-^\x18\xc2\xa5\xc9\x9d\xbd\xe6Q\xe4F5\x0c\xe1r\xd4\x9e\xdb\xf0%t\xbb\x1d\x86p\x19Z\xb8\x87V\xec\xa6A\x0c\xe1\xb5\xd5Z\xdc\xeb.z\xebc\xd3Cx\xdb\xf3\xfc0\x0c\xa3(JH<\xf0\xb9\x1dE\xaf\xe0,\x83\xf0\r\x9c\x8d\x0b\xe1\xae\xe7yt\xf4\x07QT\xb4\xaf7\xeew8~;\xdd\xc2\x8d\xf35nC-\n\xe1m\xafG\x7fW\n\xcc\xc8\xf4H\xd6\x13\xdb\x81\xb5\x11+\x8fN\xf1\x01\x9f:7\xd3N\x85\xf0\x16\xb5\xd8ATq\x86\xc8b\x18\\\'\x07)\x8fe\xff\x9e[vay\xad[\x82i\x08\x1f\x1f\xefa9\x01l)\x0c\xbe#\x9c\xf9\xefhXu\xa4\xcb+\xfd\x07\xf5\xdd\xd8\xac\xf3\xd0\xbaA\x10\xcbx\x84\xe5\xdf\xa3\xf1\xf6\xec\x91]0j\x80\xc85\xec-\xe47\xed*\x17\xa2\xf3&s\x8b`\xd4\x07\x91)\x99\xe5\xd1\xab<\x95\xab\xf5Vy\x03\xc7tM\x82\xb8\xe4\x91%9\xad%G\x99\xb5\xb2 \x89\r0T4\x04M\xa7\x83\x9deG\xd5\xf5\xb2\xb0\x01\x86\xb9\xde\xac\x9aY\x90\x04\xc8\t\xfeRu\x8c\xa1\xd0\xce\x02\xfa\x11`\x93Mr\xf5\xb3\x00\r\xc3h\xbfb\x03,\x00\xc3p\x8d\xde\xfc`\x82\x05\x89\x80.\x7f\x18n\x1cm\x84\x05\xcd\xf1 \xda\x86\xe9\x1e\xde\x86X\xa4W\x90\x83\x9b\x85\x9b\xbe\x0e\xc5\x18\x0bJc\x00k\xd9\xdc4\n\x93,\xa8\x06\x80f\x1ba\xfd\x8fc5\x0b@a\x1c\xc0U(\xa6Y@\t\xe3\x00P\x00`\x01"\x8c\xb7M\x8fA*\x08,\xcc\x87q\x18\xd7\x03\xc1`A\xcc\x86\xf1\x16\x08\x14pX\x18\xec\xc1jz\x8e7\x11 \x16\xa6z\x87AA\x01\x89\x85)\xc3\xa8{+\x834Abaf\x0b\x95\xf1\xe9\xf6\x85 \xb10\xd2\xcd\x1e\x0e\nX,\x0c\x18\x06\xa4k`A\xb10`\x18\x10\xe6\xdb\x13\xc1b\xa1\xdf0\x00\xb9(`,\xf4\x1b\x86\xd1E\xd59\x01c\xa1\xfbX&\x88:\xd4D\xc0X\xb0\\\xb6#S=\xd3\x1fxZ\xc0X\xe86\x0c\x89\x17\x85\xd6\x174\x16\x9a\r\x03FQ0\x174\x16z\r\x03T\xb8\x80\xc7B\xaba\x80\n\x17\xf0Xh\xddU\x08*\\\x00d\x11kd\x01*\\\x00d\xa1\xd10\xbc\xfa\x0f+S\x00Y\xe83\x0c\xf3[\xa2f\x04\x90\x85>\xc3\x00\xb3\x8a\x94\t"\x0bm\x86a\xfa\x83\xce\t\xda\xf3\x8c\xa5i\xb1\x15X\xb8\x80\xc9B\xd3.\x04`\xe1\x02&\x0bM\x86\x01,\\\x00e\xa1\xc50\\\xd3\x9fr^0Yh1\x0c\x83\xa7\x87\x8b\x05\x94\x85\x0e\xc3\xe8\xd7\x7fL\xb9\x02\xcaB\xc7b+\x94\xed\x82\x17\x82\xcaB\xfd.\x04p\xe1\x02,\x0b\xf5\x86\x01.\\\xc0e\xa1\xdc0\xc0\x85\x0b\xb8,\x94\x1b\x06\xb8p\x01\x98\x85b\xc3\x80\xb4y3\x17\\\x16\x8a\x17[!m\xde\xcc\x05\x97\x85\xe2]\x08\x906o\xe6\x02\xccB\xada@\xda\xbc\x99\x0b0\x0b\xa5\x86\x01\xad^\x9e\n2\x0b\x95\x86\x01\xd0,\xa6Y|yrsg\xe7ntf\xfa\x91.\xa5\xce0\x00F\xee)\x16G\xff\x04\x996+\xcb\xfa\xaf\xc6\x7f\xe7\x9d\x9e\x87S\xb6\xd8\xea\xc2\xda\x8c\x93k\xc2\xe2\xf3f\xd0\xfb\xf7\xd3\xe1\xc1\xfb\xdbA\xf0\xf0w\xf9\xdf\xd7\xcaB\xd9.\x04h+z\x99r\x16\x07\x9b\xc1\xbdSBN\xcf\t\xd9\xdf\x08\xee\x97\xc3x\x15<#\x8f\xb4\xb1Pd\x18@\xfa\x1c\xcc+g\xb1\x1b\xdc\'\xbf^l\x07\xeb\xb7\xbe\xeew\x83\x17\x84\x9c\x1f\x1c\x9cg\x7ft\xfc\xed8{q\xf6\xfd\xe8\x92\x05\xfd\x9f\xdfb?\x91Kj\x0c\x03\xe0\xdc"U\xc6\xe2cp\xf5\xec\xf7\x9d \xe8u\x83\xee:E\xf1\xfd\xeez\x10t\xef\x1d\x90\xdf\xaf\xff\xa6.\xe9\xef\xd7\xbf\xc9\xb7\xdb\xf4\xad\x8d\xcd\xee\x98\xc5\x93\xf4\x7fz\xcf\x7f)\x7f<%\x86\x01kw\xf9<\x8bGt\xfc\xa3`k}k\x93\x8e\xfc\xfa\xd6\xd6z\xd0\rC\xcae\x8f\x06\xf4\xad\x1b[Ap\xeb]7\xd8\xb8\x9er\x19\xb3\xa0Tn\xec\x04\xc1\xeeO\xe5\xcf\xa7\xc20\xa0\xed9\x98eq=\xf8B\xdd\xd4(\xb8\xd0c\x1a<N\xd21\xff\xfb?\xfa\xc7\xffm\xd3WOi\xb2\xbb\x7f\xfa5c\xf1\x8cR\xf8\xb6\x13\xa87v\x05\x8b\xad\x10\xa7yS,\xb6\x83cr58\x0b\x82\x93T_\x82\xa7\xe4\xe4\xf5\xebS\xf28\xe8\xfd \xff=\xffH\x8e6\xd3\xb7^E\xe7\xe4\xdb\x98\xc5S\x92<\x7f}N\xdf=P\xfe\x80\xf2w!@\x9c\xe6M\xb1\xd8\xa1\x83z-8\x08\x82c*r\xd4=\xfby-\x08v\xceO\xbbC\xf2\x96\x9a\xc4[\xf2\xef\xc6\xcf3\xea\xa1ng,\xd6O\xce\xb6\xd7\xef\x1c\x92\xa7\xc1\x13\xe5\x0f(\xdd0@N\xf3\xa6X\xdc\r\xf6\xc8\x93\xe0\xce\xd8=m\x91O\xbbd\x14\x84;\xc1\x07r\xfd#\t\x83\xfb\xc1u\xf2\xe1\x1f\xf2>\xb8\xde\x0b\x8e\xc7,\xae\x91O\xcf\x8e\xc8\xe1c:\'Q\xff\x84#_j)D\xda4/\xfe\xe3\x01\xfd\xfa\xdf\x1f{\x05\x7fv+\x7f\xf3\xfc\xf6\xd4\x9bG\xb7\xd6\xd6\xae\x7f%\xe4\xc1\xda\xda\xff\x08y\xbd\xb6\xf6z\xf2:\xfb\x9a\xb3x\x1b\xfcCN\xb6\xb2P\xf1\x9c<\xdf%\xfb\xc1\xf5\x90\xb2\xb8\x91\xb2x\x90\xb2\xb8EY\xec^\r\x8er\x16\xe4\xd7\xff\xdd\xa2\x7f\xb7\xf7^=\x8b\xb4\x03\x9e\xc4[3\xa4M\xf3\xe2\xbf\xd6\xe9\xd7{\xdd*\x16Ip\xf9\xde\x8f\xee\x9b\xd3\x9f{\xdd\xcf{\xd7N\x8e\xaf\xbe=\\\xfb~\xf0\xe7a\xf6:\xfb:a\xf1\xb3G\r\xe3\xfbN\x9aD=\xfeu\xba\xb5\xf1\xf3\'uH\xd7\xa8\x8fzN\xde\xd07#\xf2l\xf3\xfc4M\xa7&>\x8a\xa4\t\xd6\xbd \xb8\xa3\x83\x05\x91h\x1c\xf2\xa6y\xf1\xc6\x8d\xcf\xe4\xf7\xb5\x9b{\xe4\xe1\x9fW\xfe\xf9\xbd\xbf\xbb}\xe5\xeex\xca\xf5\xbf+[a\xfe\xe6\xe6\x1f\xeb\xd9\x0b\xfav\xff\xeb\xde_W\x1e\x1d\xef\xa4\x7f\xe5\xd1\xb3\x97\xf7\x08y\xf8,{=\xf9\x9a\xcf\xf5\xde\x05\xdd}\xf2\xfbS\xb4wD~\xf6\x83\xe0_r\xf2\xe2\xe5\t\x8d\x07\xbd\x84\xec?\xfd@~\xf4\x82!9~\xfe\xea,\x8f\xdd\x8f\xe8\x9f??&\xb7\x03}\xc5\x04I\xc6!/\xf3\x8b7\xa2\x07d\xf4\xe4\xe6\xde\xfe\xf6\xe9\xd9\xf6\x87\xfd+\x1f\x93\xabo\xe8\xfb{\xbd\xe3\xafk\xf9\x9b\xd4.\xb2\x17\xf4\xfd\x1bd\xe3\x07\xfd\xcfm\x9a\x81\x9e\xfc\xf5\xfd\xd1\xbf\x84\xbcL\x1d\x13}=\xf9:\xa9G=\t\xd6\x1f\x1e\xd2\xff\xfe\xfa\xb0C\xe7\x19\xc13\x9a\xc0\x9e=\xa5&q\xed\x0b}\xf3\xd3\xb5\xd4w\xd1y\xf8\x87\xf3\x8c\xc58\xe7={\x12t\xbficA\xa4\x18\x87\xc4i^\xbcq\x16\x90;\xdf\xa8]\xec\xdd\xd9\xea\xbc\xdb\xbfI\xc8\x9b4<\xdc\x7fAm \x7f3\xf5Q\xe3\x17\xf4\xfd]r\xf5\xf0\xc7\xdf)\x8b\xa4\xf7vl\x07)\x8b\xf4\xf5\xe4\xebE\x9d\xf6U7\x08\xb6o\xde\xa0\x93\xbd\xeb?\xde\xd3\xb9\xde\xee\xeeF\xd0}{\x93\xd2\xf8g<\xc5\x0b\xba\x9b7w6~\x7f\xca\' \x1b\xbb\xbb\xdd\xd4\x96\xf4\xaa\xb6qH\x9c\xe6\xc5\x1b$\xfc\xb8En\xee\xbd\xd9|\xf3e\xf7\xdd\xfe-\x1a\x8f\xef\xe4,\xee\xe4oR\x16\xd9\x0b\xfa~?~\xe7\xfb\x1f\xa8\x8f\xfa\xbeA\x87\xed\xe5\xfd\xb1\x8f\x1a\xbf\xce\xbfN\xad_\x1c=\xea\xa5\x83\x1cF\xbfHV\xf0X\xbf\xfd\x9d\xfcz\x99F\xf4\xadg\xebAtB\x8d\xe31y9&\xf1d\xf2\xe7\xfa%n\x1c^o(sjAY\xbc\xdexDY<\xb8{\xfea-\xda_\xfb\x9a\\M\xc7\xfc}\xf7\xc7\xb7\xb5\xfc\xcd\x13\xff<{\x91\x8eo\x1a\xbb\xdfo|>YO\x9d\xc9\xa1\xff\xed\xe0\xcfo\xd9\xeb\xec\xeb\xdc\xba\xde\xd1\xd7\xf84\x7fy\x16\xc7\xf9\xa2\xd2\xe1\x17\xea\xbb\xee\x04\x0f\xc9\xcf\xfd\xcf\x84\x06\xf0\x8fs\x7f\xae]\x02\xc6\xd1\xf2\xfb\xd2\xb7CQ\x16\xa7\x9d\xaf\x94\xc5\xc1\xc6\x95\x1b\x83\xc7\xfb\xdb\xdbk\x0f\xc7\x7f\xf0\xe8\xca\xc6n\xfe&\xd9\xfa+\x7fA\xc69\xed\x15\x9a\xd3>\xf8\x83\xea!y\xed\xaf\xbd\xc8_\xe7\xef\xb0\xae\xb1\x1en\x04\xf7\x0f\xc8\xaf\x8f!M~\x01(\x1e\x86\x1e\xa3y\xb8^8\xd4Q"\xdf\xbfQ\xfb\x9f`]\xef\xfeD\x03I\x97:\xa6\xf0D\xc3\xe7b\xd3r m\x7f\xa0mw\xa0F\x16$y\xb2\x1d\xac\x87\xaf\xceu}6F\x95\x01q;a\x04s\xc5\xa8\\\x90\xf7\x810k\x0eH\xbb7\x00[\xff\xab\xd2\xff\x03\x1d\x04\'\xf6\xac0Qk\x00\x00\x00\x00IEND\xaeB`\x82'
# print(bytearray(img_str))
nparr = np.frombuffer(img_str, dtype=np.uint8)
# nparr = np.array(img_str)
print(nparr)
img = cv2.imdecode(nparr, cv2.COLOR_RGB2BGR) # cv2.IMREAD_COLOR in OpenCV 3.1
height, width, channels = img.shape
for i in range(height):
    for j in range(width):
        # img[i, j] is the RGB pixel at position (i, j)
        # check if it's [0, 0, 0] and replace with [255, 255, 255] if so
        if img[i, j].sum() != 0:
            img[i, j] = [0, 0, 0]
        else:
            img[i, j] = [255, 255, 255]
imgRGB = img.copy()
img = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
height, width = img.shape
matrix = img.copy()
for i in range(height):
    for j in range(width):
        # img[i, j] is the RGB pixel at position (i, j)
        # check if it's [0, 0, 0] and replace with [255, 255, 255] if so
        if matrix[i, j] != 0:
            matrix[i, j] = 1

for y in range(height):
    for x in range(width):
        if matrix[y, x] == 1:
            neighbors = 0
            # up
            if height > y - 1 >= 0 and not matrix[y - 1, x]:
                neighbors += 1
            # right
            if width > x + 1 >= 0 and not matrix[y, x + 1]:
                neighbors += 1
            # down
            if height > y + 1 >= 0 and not matrix[y + 1, x]:
                neighbors += 1
            # left
            if width > x - 1 >= 0 and not matrix[y, x - 1]:
                neighbors += 1
            # ul
            if width > x - 1 >= 0 and height > y - 1 >= 0 and not matrix[y - 1, x - 1]:
                neighbors += 1
            # ur
            if width > x + 1 >= 0 and height > y - 1 >= 0 and not matrix[y - 1, x + 1]:
                neighbors += 1
            # dr
            if width > x + 1 >= 0 and height > y + 1 >= 0 and not matrix[y + 1, x + 1]:
                neighbors += 1
            # dl
            if width > x - 1 >= 0 and height > y + 1 >= 0 and not matrix[y + 1, x - 1]:
                neighbors += 1
            matrix[y, x] = neighbors
for y in range(height):
    for x in range(width):
        if matrix[y, x] == 1:
            max = 0
            # up
            if height > y - 1 >= 0:
                if max < (matrix[y - 1, x]):
                    max = matrix[y - 1, x]
            # right
            if width > x + 1 >= 0:
                if max < (matrix[y, x + 1]):
                    max =(matrix[y, x + 1])
            # down
            if height > y + 1 >= 0:
                if max < (matrix[y + 1, x]):
                    max =(matrix[y + 1, x])
            # left
            if width > x - 1 >= 0:
                if max < (matrix[y, x - 1]):
                    max =(matrix[y, x - 1])
            # ul
            if width > x - 1 >= 0 and height > y - 1 >= 0:
                if max < (matrix[y - 1, x -1]):
                    max =(matrix[y - 1, x -1])
            # ur
            if width > x + 1 >= 0 and height > y - 1 >= 0:
                if max < (matrix[y - 1, x +1]):
                    max =(matrix[y - 1, x +1])
            # dr
            if width > x + 1 >= 0 and height > y + 1 >= 0:
                if max < (matrix[y + 1, x +1]):
                    max =(matrix[y + 1, x +1])
            # dl
            if width > x - 1 >= 0 and height > y + 1 >= 0:
                if max < (matrix[y + 1, x -1]):
                    max =(matrix[y + 1, x -1])
            if max > 1:
                matrix[y, x] = max - 1
# 1.create a grid
grid = Matrix(map = matrix)
# 2. create a start and end cell
# start: 373, 90
# goal: 85, 251
print(matrix)
start = grid.node(373, 90)
end = grid.node(85, 251)
start = grid.node(344, 11)
end = grid.node(344, 360)

# map = Grid(matrix=matrix)
# start = map.node(373, 90)
# end = map.node(85, 251)
# start = map.node(344, 11)
# end = map.node(344, 360)


#3.create a finder with a movement style
# heuristic=manhattan
finder = AStarFinder(diagonal_movement=1,heuristic=manhattan, weight = 1)
#4.use the finder to find the path
current = datetime.datetime.now()
print(current)
path, runs = finder.find_path(start,end,grid)
#print the result
# print(map.grid_str(path=path, start=start,end=end))
#open text file
# text_file = open("data.txt", "w")
 
# #write string to file
# text_file.write(map.grid_str(path=path, start=start,end=end,show_weight=True))
 
# #close file
# text_file.close()
print(datetime.datetime.now() - current)
print(runs)
# for item in path:
#     x, y = item
#     imgRGB[y,x] = [255,0,0]
# imgRGB[11,344] = imgRGB[11,344] = [0,255,0]
a = []
path = [[373,  90],
 [255, 208],
 [254, 208],
 [253, 209],
 [252, 209],
 [251, 210],
 [250, 210],
 [249, 211],
 [248, 211],
 [247, 212],
 [246, 212],
 [245, 213],
 [244, 213],
 [199, 258],
 [185, 258],
 [176, 249],
 [175, 249],
 [174, 248],
 [173, 248],
 [172, 247],
 [159, 247],
 [158, 248],
 [156, 248],
 [155, 249],
 [153, 249],
 [152, 250],
 [150, 250],
 [149, 251],
 [147, 251],
 [146, 252],
 [144, 252],
 [138, 258],
 [ 95, 258]]

for index, item in enumerate(path): 
    if index == len(path) -1:
        break
    cv2.line(imgRGB, item, path[index + 1], [0, 255, 0], 2) 
cv2.imshow('map', imgRGB)
cv2.waitKey()
# print(path)
# print(runs)
